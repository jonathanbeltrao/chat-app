<!DOCTYPE html>
<html>
<head>
  <title>Chat App</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <%= csrf_meta_tags %>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      height: 100vh;
      display: flex;
      justify-content: center;
      align-items: center;
    }

    .chat-container {
      background: white;
      border-radius: 10px;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
      width: 90%;
      max-width: 900px;
      height: 80vh;
      display: flex;
      flex-direction: column;
      overflow: hidden;
    }

    .chat-body {
      display: flex;
      flex: 1;
      overflow: hidden;
    }

    .users-sidebar {
      width: 200px;
      background: #f8f9fa;
      border-right: 1px solid #e2e8f0;
      padding: 20px;
      overflow-y: auto;
    }

    .users-title {
      font-weight: bold;
      color: #4a5568;
      margin-bottom: 15px;
      font-size: 0.9rem;
      text-transform: uppercase;
    }

    .user-item {
      display: flex;
      align-items: center;
      padding: 8px 0;
      color: #2d3748;
      font-size: 0.9rem;
    }

    .user-status {
      width: 8px;
      height: 8px;
      background: #48bb78;
      border-radius: 50%;
      margin-right: 8px;
    }

    @media (max-width: 768px) {
      .users-sidebar {
        display: none;
      }

      .chat-container {
        max-width: 600px;
      }
    }

    .chat-header {
      background: #4a5568;
      color: white;
      padding: 20px;
      text-align: center;
      font-size: 1.5rem;
      font-weight: bold;
    }

    .messages-container {
      flex: 1;
      padding: 20px;
      overflow-y: auto;
      background: #f8f9fa;
    }

    .message {
      margin-bottom: 15px;
      padding: 12px;
      border-radius: 8px;
      background: white;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      animation: slideIn 0.3s ease-out;
    }

    @keyframes slideIn {
      from {
        opacity: 0;
        transform: translateY(20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .message-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 5px;
    }

    .message-username {
      font-weight: bold;
      color: #4a5568;
      font-size: 0.9rem;
    }

    .message-time {
      font-size: 0.8rem;
      color: #718096;
    }

    .message-content {
      color: #2d3748;
      line-height: 1.4;
    }

    .chat-input-container {
      padding: 20px;
      background: white;
      border-top: 1px solid #e2e8f0;
    }

    .message-input {
      flex: 1;
      padding: 12px;
      border: 2px solid #e2e8f0;
      border-radius: 6px;
      font-size: 1rem;
      transition: border-color 0.2s;
    }

    .message-input:focus {
      outline: none;
      border-color: #667eea;
    }

    .input-group {
      display: flex;
      gap: 10px;
    }

    .send-button {
      background: #667eea;
      color: white;
      border: none;
      padding: 12px 24px;
      border-radius: 6px;
      cursor: pointer;
      font-size: 1rem;
      font-weight: bold;
      transition: background-color 0.2s;
    }

    .send-button:hover {
      background: #5a67d8;
    }

    .send-button:disabled {
      background: #cbd5e0;
      cursor: not-allowed;
    }

    .no-messages {
      text-align: center;
      color: #718096;
      font-style: italic;
      margin-top: 50px;
    }

    .typing-indicator {
      padding: 10px 20px;
      color: #718096;
      font-style: italic;
      font-size: 0.9rem;
      background: #f1f5f9;
      border-top: 1px solid #e2e8f0;
    }

    .typing-dots {
      display: inline-block;
    }

    .typing-dots::after {
      content: "...";
      animation: typing 1.5s infinite;
    }

    @keyframes typing {
      0%,
      60% {
        content: "";
      }
      20% {
        content: ".";
      }
      40% {
        content: "..";
      }
      60% {
        content: "...";
      }
    }
  </style>
</head>
<body>
  <div class="chat-container">
    <div class="chat-header">
      Chat App
    </div>
    
    <div class="chat-body">
      <div class="users-sidebar">
        <div class="users-title">Online Users</div>
        <div id="usersList">
          <div class="no-messages">Loading users...</div>
        </div>
      </div>
      
      <div class="messages-container" id="messages">
        <% if @messages.any? %>
          <% @messages.each do |message| %>
            <div class="message">
              <div class="message-header">
                <span class="message-username"><%= message.username %></span>
                <span class="message-time"><%= message.created_at.strftime("%I:%M %p") %></span>
              </div>
              <div class="message-content"><%= message.content %></div>
            </div>
          <% end %>
        <% else %>
          <div class="no-messages">No messages yet. Start the conversation!</div>
        <% end %>
      </div>
    </div>
    
    <div class="typing-indicator" id="typingIndicator" style="display: none;">
      <span id="typingText"></span>
    </div>
    
    <div class="chat-input-container">
      <div class="input-group">
        <input type="text" id="messageInput" class="message-input" placeholder="Type your message..." maxlength="500">
        <button id="sendButton" class="send-button">Send</button>
      </div>
    </div>
  </div>

  <script>
    class ChatApp {
      constructor() {
        // Check if username is set, redirect if not
        this.username = localStorage.getItem("chatUsername");
        if (!this.username) {
          window.location.href = "/";
          return;
        }

        this.messagesContainer = document.getElementById("messages");
        this.messageInput = document.getElementById("messageInput");
        this.sendButton = document.getElementById("sendButton");
        this.usersList = document.getElementById("usersList");
        this.typingIndicator = document.getElementById("typingIndicator");
        this.typingText = document.getElementById("typingText");

        this.isTyping = false;
        this.typingTimeout = null;
        this.onlineUsers = new Set();
        this.typingUsers = new Set();

        this.initializeActionCable();
        this.bindEvents();
        this.scrollToBottom();
      }

      initializeActionCable() {
        const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
        const wsUrl = `${protocol}//${window.location.host}/cable`;
        
        this.cable = ActionCable.createConsumer(wsUrl);
        
        // Subscribe to messages channel
        this.messagesChannel = this.cable.subscriptions.create("MessagesChannel", {
          connected: () => {
            console.log("Connected to MessagesChannel");
          },
          
          disconnected: () => {
            console.log("Disconnected from MessagesChannel");
          },
          
          received: (data) => {
            this.addMessageToDOM(data);
          }
        });

        // Subscribe to users channel
        this.usersChannel = this.cable.subscriptions.create(
          {
            channel: "UsersChannel",
            username: this.username
          },
          {
            connected: () => {
              console.log("Connected to UsersChannel");
            },
            
            disconnected: () => {
              console.log("Disconnected from UsersChannel");
            },
            
            received: (data) => {
              this.handleUsersUpdate(data);
            }
          }
        );

        // Subscribe to typing channel
        this.typingChannel = this.cable.subscriptions.create(
          {
            channel: "TypingChannel",
            username: this.username
          },
          {
            connected: () => {
              console.log("Connected to TypingChannel");
            },
            
            disconnected: () => {
              console.log("Disconnected from TypingChannel");
            },
            
            received: (data) => {
              this.handleTypingUpdate(data);
            }
          }
        );
      }

      bindEvents() {
        this.sendButton.addEventListener("click", () => this.sendMessage());

        this.messageInput.addEventListener("keypress", (e) => {
          if (e.key === "Enter") {
            this.sendMessage();
          }
        });

        this.messageInput.addEventListener("input", () => {
          this.handleTyping();
        });

        this.messageInput.addEventListener("keyup", () => {
          this.handleTyping();
        });

        // Send periodic activity updates
        setInterval(() => {
          this.usersChannel.perform("update_activity", {
            username: this.username
          });
        }, 30000); // Every 30 seconds
      }

      sendMessage() {
        const content = this.messageInput.value.trim();

        if (!content) {
          alert("Please enter a message");
          return;
        }

        // Send via ActionCable
        this.messagesChannel.perform("speak", {
          message: content,
          username: this.username
        });

        this.messageInput.value = "";
        
        // Stop typing when message is sent
        if (this.isTyping) {
          this.isTyping = false;
          this.typingChannel.perform("stop_typing", {
            username: this.username
          });
        }
      }

      addMessageToDOM(message) {
        const noMessagesDiv = this.messagesContainer.querySelector(".no-messages");
        if (noMessagesDiv) {
          noMessagesDiv.remove();
        }

        const messageDiv = document.createElement("div");
        messageDiv.className = "message";
        messageDiv.innerHTML = `
          <div class="message-header">
            <span class="message-username">${this.escapeHtml(message.username)}</span>
            <span class="message-time">${message.created_at}</span>
          </div>
          <div class="message-content">${this.escapeHtml(message.content)}</div>
        `;

        this.messagesContainer.appendChild(messageDiv);
        this.scrollToBottom();
      }

      handleUsersUpdate(data) {
        switch (data.action) {
          case "user_joined":
            this.onlineUsers.add(data.username);
            break;
          case "user_left":
            this.onlineUsers.delete(data.username);
            break;
          case "user_activity":
            this.onlineUsers.add(data.username);
            break;
        }
        this.updateUsersList();
      }

      updateUsersList() {
        this.usersList.innerHTML = "";

        if (this.onlineUsers.size === 0) {
          this.usersList.innerHTML = '<div class="no-messages">No users online</div>';
          return;
        }

        Array.from(this.onlineUsers).sort().forEach((username) => {
          const userDiv = document.createElement("div");
          userDiv.className = "user-item";
          userDiv.innerHTML = `
            <div class="user-status"></div>
            ${this.escapeHtml(username)}
          `;
          this.usersList.appendChild(userDiv);
        });
      }

      handleTyping() {
        const hasText = this.messageInput.value.trim().length > 0;

        if (hasText && !this.isTyping) {
          this.isTyping = true;
          this.typingChannel.perform("start_typing", {
            username: this.username
          });
        }

        // Clear previous timeout
        clearTimeout(this.typingTimeout);

        // Set timeout to stop typing after 2 seconds of inactivity
        this.typingTimeout = setTimeout(() => {
          if (this.isTyping) {
            this.isTyping = false;
            this.typingChannel.perform("stop_typing", {
              username: this.username
            });
          }
        }, 2000);
      }

      handleTypingUpdate(data) {
        switch (data.action) {
          case "start_typing":
            if (data.username !== this.username) {
              this.typingUsers.add(data.username);
            }
            break;
          case "stop_typing":
            this.typingUsers.delete(data.username);
            break;
        }
        this.updateTypingIndicator();
      }

      updateTypingIndicator() {
        if (this.typingUsers.size === 0) {
          this.typingIndicator.style.display = "none";
          return;
        }

        const typingArray = Array.from(this.typingUsers);
        let typingText = "";
        
        if (typingArray.length === 1) {
          typingText = `${typingArray[0]} is typing`;
        } else if (typingArray.length === 2) {
          typingText = `${typingArray[0]} and ${typingArray[1]} are typing`;
        } else {
          typingText = `${typingArray.length} people are typing`;
        }

        this.typingText.innerHTML = `${typingText} <span class="typing-dots"></span>`;
        this.typingIndicator.style.display = "block";
      }

      escapeHtml(text) {
        const div = document.createElement("div");
        div.textContent = text;
        return div.innerHTML;
      }

      scrollToBottom() {
        setTimeout(() => {
          this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;
        }, 100);
      }

      // Cleanup method
      destroy() {
        if (this.cable) {
          this.cable.disconnect();
        }
        if (this.typingTimeout) {
          clearTimeout(this.typingTimeout);
        }
      }
    }

    // Initialize the chat app when the page loads
    document.addEventListener("DOMContentLoaded", () => {
      new ChatApp();
    });

    // Cleanup on page unload
    window.addEventListener("beforeunload", () => {
      if (window.chatApp) {
        window.chatApp.destroy();
      }
    });
  </script>
  
  <%= javascript_include_tag "actioncable" %>
</body>
</html>
