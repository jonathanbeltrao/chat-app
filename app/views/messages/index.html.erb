<!DOCTYPE html>
<html>
<head>
  <title>Chat App</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <%= csrf_meta_tags %>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      height: 100vh;
      display: flex;
      justify-content: center;
      align-items: center;
    }

    .chat-container {
      background: white;
      border-radius: 10px;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
      width: 90%;
      max-width: 600px;
      height: 80vh;
      display: flex;
      flex-direction: column;
      overflow: hidden;
    }

    .chat-header {
      background: #4a5568;
      color: white;
      padding: 20px;
      text-align: center;
      font-size: 1.5rem;
      font-weight: bold;
    }

    .messages-container {
      flex: 1;
      padding: 20px;
      overflow-y: auto;
      background: #f8f9fa;
    }

    .message {
      margin-bottom: 15px;
      padding: 12px;
      border-radius: 8px;
      background: white;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      animation: slideIn 0.3s ease-out;
    }

    @keyframes slideIn {
      from {
        opacity: 0;
        transform: translateY(20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .message-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 5px;
    }

    .message-username {
      font-weight: bold;
      color: #4a5568;
      font-size: 0.9rem;
    }

    .message-time {
      font-size: 0.8rem;
      color: #718096;
    }

    .message-content {
      color: #2d3748;
      line-height: 1.4;
    }

    .chat-input-container {
      padding: 20px;
      background: white;
      border-top: 1px solid #e2e8f0;
    }

    .username-input, .message-input {
      width: 100%;
      padding: 12px;
      border: 2px solid #e2e8f0;
      border-radius: 6px;
      font-size: 1rem;
      margin-bottom: 10px;
      transition: border-color 0.2s;
    }

    .username-input:focus, .message-input:focus {
      outline: none;
      border-color: #667eea;
    }

    .input-group {
      display: flex;
      gap: 10px;
    }

    .message-input {
      flex: 1;
      margin-bottom: 0;
    }

    .send-button {
      background: #667eea;
      color: white;
      border: none;
      padding: 12px 24px;
      border-radius: 6px;
      cursor: pointer;
      font-size: 1rem;
      font-weight: bold;
      transition: background-color 0.2s;
    }

    .send-button:hover {
      background: #5a67d8;
    }

    .send-button:disabled {
      background: #cbd5e0;
      cursor: not-allowed;
    }

    .no-messages {
      text-align: center;
      color: #718096;
      font-style: italic;
      margin-top: 50px;
    }
  </style>
</head>
<body>
  <div class="chat-container">
    <div class="chat-header">
      Chat App
    </div>
    
    <div class="messages-container" id="messages">
      <% if @messages.any? %>
        <% @messages.each do |message| %>
          <div class="message">
            <div class="message-header">
              <span class="message-username"><%= message.username %></span>
              <span class="message-time"><%= message.created_at.strftime("%I:%M %p") %></span>
            </div>
            <div class="message-content"><%= message.content %></div>
          </div>
        <% end %>
      <% else %>
        <div class="no-messages">No messages yet. Start the conversation!</div>
      <% end %>
    </div>
    
    <div class="chat-input-container">
      <input type="text" id="username" class="username-input" placeholder="Enter your username..." maxlength="50">
      <div class="input-group">
        <input type="text" id="messageInput" class="message-input" placeholder="Type your message..." maxlength="500">
        <button id="sendButton" class="send-button">Send</button>
      </div>
    </div>
  </div>

  <script>
    class ChatApp {
      constructor() {
        this.messagesContainer = document.getElementById('messages');
        this.messageInput = document.getElementById('messageInput');
        this.usernameInput = document.getElementById('username');
        this.sendButton = document.getElementById('sendButton');
        
        this.initializeWebSocket();
        this.bindEvents();
        this.loadUsernameFromStorage();
        this.scrollToBottom();
      }

      initializeWebSocket() {
        const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
        const wsUrl = `${protocol}//${window.location.host}/cable`;
        
        this.cable = new WebSocket(wsUrl);
        
        this.cable.onopen = () => {
          console.log('Connected to ActionCable');
          this.subscribe();
        };

        this.cable.onmessage = (event) => {
          this.handleMessage(JSON.parse(event.data));
        };

        this.cable.onclose = () => {
          console.log('Disconnected from ActionCable');
          setTimeout(() => this.initializeWebSocket(), 3000);
        };

        this.cable.onerror = (error) => {
          console.error('WebSocket error:', error);
        };
      }

      subscribe() {
        const subscribeMessage = {
          command: 'subscribe',
          identifier: JSON.stringify({
            channel: 'MessagesChannel'
          })
        };
        this.cable.send(JSON.stringify(subscribeMessage));
      }

      handleMessage(data) {
        if (data.type === 'confirm_subscription') {
          console.log('Subscription confirmed');
          return;
        }

        if (data.message) {
          this.addMessageToDOM(data.message);
        }
      }

      bindEvents() {
        this.sendButton.addEventListener('click', () => this.sendMessage());
        
        this.messageInput.addEventListener('keypress', (e) => {
          if (e.key === 'Enter') {
            this.sendMessage();
          }
        });

        this.usernameInput.addEventListener('input', () => {
          localStorage.setItem('chatUsername', this.usernameInput.value);
        });
      }

      loadUsernameFromStorage() {
        const savedUsername = localStorage.getItem('chatUsername');
        if (savedUsername) {
          this.usernameInput.value = savedUsername;
        }
      }

      sendMessage() {
        const content = this.messageInput.value.trim();
        const username = this.usernameInput.value.trim();

        if (!content || !username) {
          alert('Please enter both username and message');
          return;
        }

        const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');

        fetch('/messages', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': csrfToken
          },
          body: JSON.stringify({
            message: {
              content: content,
              username: username
            }
          })
        })
        .then(response => {
          if (response.ok) {
            this.messageInput.value = '';
          } else {
            throw new Error('Failed to send message');
          }
        })
        .catch(error => {
          console.error('Error sending message:', error);
          alert('Failed to send message. Please try again.');
        });
      }

      addMessageToDOM(message) {
        const noMessagesDiv = this.messagesContainer.querySelector('.no-messages');
        if (noMessagesDiv) {
          noMessagesDiv.remove();
        }

        const messageDiv = document.createElement('div');
        messageDiv.className = 'message';
        messageDiv.innerHTML = `
          <div class="message-header">
            <span class="message-username">${this.escapeHtml(message.username)}</span>
            <span class="message-time">${message.created_at}</span>
          </div>
          <div class="message-content">${this.escapeHtml(message.content)}</div>
        `;

        this.messagesContainer.appendChild(messageDiv);
        this.scrollToBottom();
      }

      escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
      }

      scrollToBottom() {
        setTimeout(() => {
          this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;
        }, 100);
      }
    }

    // Initialize the chat app when the page loads
    document.addEventListener('DOMContentLoaded', () => {
      new ChatApp();
    });
  </script>
</body>
</html>
